#define MAX_FUNCTION	50001
#define HTABSIZE		(1<<17)
#define MASK			(HTABSIZE-1)
#define MAX_TAG			500001
#define MAX_USER		1001
typedef unsigned long long ULL;
int mstrcmp(const char* a, const char* b) {
	int i;
	for (i = 0; a[i] && a[i] != b[i]; i++);
	return (a[i] - b[i]);
}
void mstrcpy(char* dest, char* src) {
	int i = 0;
	while (src[i] != '\0') { dest[i] = src[i++]; }
	dest[i] = src[i];
}

ULL encode(char str[]) {
	ULL val = 0;
	for (register int i = 1; str[i]; i++) {
		val = (val << 5) + (str[i] - 'a' + 1);
	}
	return val;
}
struct message {
	int id;
	int mid;
	int time;
	void init(int _id, int _mid, int _time) {
		id = _id;
		mid = _mid;
		time = _time;
	}
}msg[MAX_FUNCTION];

struct hashtag {
	ULL tag;
	int mid, id;
	hashtag* next;
	hashtag* alloc(ULL _tag, int _id, int _mid, hashtag* _next) {
		tag = _tag;
		id = _id;
		mid = _mid;
		next = _next;
		return this;
	}
}hbuf[MAX_TAG],htab[HTABSIZE];

struct user {
	int mid;
	user* next;
	user* alloc(int _mid, user* _next) {
		mid = _mid;
		next = _next;
		return this;
	}
}ubuf[MAX_FUNCTION],utab[MAX_USER];

struct friendship {
	int uid;
	friendship* next;
	friendship* alloc(int _uid, friendship* _next) {
		uid = _uid;
		next = _next;
		return this;
	}
}fbuf[MAX_FUNCTION],ftab[MAX_USER];

struct pq {
	int heap[MAX_FUNCTION], hn;
	void init() { hn = 0; }
	bool cmp(int a, int b) {
		if (msg[a].time == msg[b].time) return msg[a].id < msg[b].id;
		return msg[a].time > msg[b].time;
	}
	bool empty() { return hn == 0; }
	int size() { return hn; }
	int top() { return heap[1]; }
	void push(int mid) {
		int target = hn + 1;
		while (target != 1 && cmp(mid, heap[target/2])) {
			heap[target] = heap[target / 2];
			target /= 2;
		}
		heap[target] = mid;
		hn++;
	}
	int pop() {
		int res = heap[1];
		int p = 1, c = 2, last = hn;
		while (c < hn) {
			if (cmp(heap[c + 1], heap[c])) c++;
			if (cmp(heap[last], heap[c])) break;
			heap[p] = heap[c];
			p = c;
			c *= 2;
		}
		return res;
	}
}PQ;

int hcnt, ucnt, fcnt, mcnt;

void init() {
	register int i = 0;
	hcnt = ucnt = mcnt = fcnt = 0;
	for (i = 0; i < MAX_USER; i++) {
		ftab[i].next = 0;
		utab[i].next = 0;
	}
	for (i = 0; i < HTABSIZE; i++) htab[i].next = 0;
}

int checktime(hashtag* p, int time) {
	if (msg[p->mid].time == time) return 0;
	if (msg[p->mid].time > time) return -1;
	return 1;
}

void createMessage(int msgID, int userID, char msgData[]) {
	register int i;
	int check;
	int time = (msgData[0] - '0') * 100000 + (msgData[1] - '0') * 10000 + (msgData[3] - '0') * 1000 +
		(msgData[4] - '0') * 100 + (msgData[6] - '0') * 10 + (msgData[7] - '0');
	msg[++mcnt].init(userID, msgID, time);

	hashtag* p;
	int hidx;
	ULL val = 0;
	for (i = 10; msgData[i]; i++) {
		if (msgData[i] == ' ') {
			hidx = val & MASK; // 이거 왜 하는지 모름
			for (p = &htab[hidx]; p->next; p = p->next) {
				check = checktime(p->next, time);
				if (check == 1 || (check == 0 && p->next->id > userID)) break;
			}
			p->next = hbuf[hcnt++].alloc(val, userID, mcnt, p->next);
			val = 0;
			continue;
		}
		if (msgData[i] == '#') continue;
		val = (val << 5) + (msgData[i] - 'a' + 1);
	}

	hidx = val & MASK;
	for (p = &htab[hidx]; p->next; p = p->next) {
		check = checktime(p->next, time);
		if (check == 1 || (check == 0 && p->next->id > userID)) break;
	}

	p->next = hbuf[hcnt++].alloc(val, userID, mcnt, p->next);
	utab[userID].next = ubuf[ucnt].alloc(mcnt, utab[userID].next);
}

void followUser(int userID1, int userID2) {
	ftab[userID1].next = fbuf[fcnt++].alloc(userID2, ftab[userID1].next);
}

int searchByHashtag(char tagName[], int retIDs[]) {
	ULL val = encode(tagName);
	int hidx = val & MASK;
	register int i = 0;

	for (hashtag* p = htab[hidx].next; p && i < 5; p = p->next) {
		if (p->tag == val) retIDs[i++] = msg[p->mid].mid;
	}
	return i;
}

int getMessages(int userID, int retIDs[]) {
	register int i = 0;
	PQ.init();
	user* p;
	for (p = utab[userID].next; p && i < 5; p = p->next) {
		PQ.push(p->mid);
		i++;
	}
	for (friendship* fp = ftab[userID].next; fp; fp = fp->next) {
		i = 0;
		for (p = utab[fp->uid].next; p && i < 5; p = p->next) {
			PQ.push(p->mid);
			i++;
		}
	}
	i = 0;
	while (!PQ.empty() && i < 5) {
		retIDs[i] = msg[PQ.top()].mid;
		PQ.pop();
		i++;
	}
	return i;
}