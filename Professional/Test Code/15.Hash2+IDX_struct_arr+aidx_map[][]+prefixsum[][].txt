#define ADDMAX 301
#define HSIZE 1000

bool mstrcmp(const char* a, const char* b) {
	int i;
	for (i = 0; a[i] && a[i]==b[i]; i++);
	if ((a[i] - b[i]) == 0) return true;
	else return false;
}
void mstrcpy(char* dest, const char* src) {
	int i = 0;
	while (src[i] != '\0') {
		dest[i] = src[i];
		i++;
	}
	dest[i] = src[i];
}
struct Hash {
	int aidx;
	int tidx;
	Hash* next, *prev;
	Hash* alloc(int _aidx, int _tidx, Hash* _next, Hash *_prev) {
		aidx = _aidx;
		tidx = _tidx;
		next = _next;
		prev = _prev;
		if (next) next->prev = this;
		if (prev) prev->next = this;
		return this;
	}
	void pop() {
		if (next) next->prev = prev;
		if (prev) prev->next = next;
	}
}nhash[HSIZE], thash[HSIZE], buf[ADDMAX*2];
struct Arr {
	int r, c, height, width, del;
	void init(int _r, int _c, int _height, int _width) {
		r = _r; c = _c; height = _height; width = _width; del = 0;
	}
	char name[12], tag[12];
}arr[ADDMAX];
int map[302][302], sum[302][302], bfcnt, aidx, tidx,RR, CC, tArea[ADDMAX];
int getkey(char str[]) {
	int key = 0;
	for (register int i = 0; str[i]; i++) {
		key = (key * 32 + str[i]) % HSIZE;
	}
	return key;
}
int getSum(int r, int c, int height, int width) {
	int r2 = r + height - 1;
	int c2 = c + width - 1;
	if (r2 > RR || c2 > CC) return-1;
	return (sum[r2][c2] - sum[r2][c - 1] - sum[r - 1][c2] + sum[r - 1][c - 1]);
}
void init(int R, int C) {
	RR = R;
	CC = C;
	for (register int i = 0; i < ADDMAX; i++) {
		tArea[i] = 0;
		for (register int j = 0; j < ADDMAX; j++) {
			map[i][j] = 0;
		}
	}
	for (register int i = 0; i < HSIZE; i++) {
		nhash[i].next = 0;
		nhash[i].prev = 0;
		thash[i].next = 0;
		thash[i].prev = 0;
	}
	aidx = bfcnt = tidx = 1;
}

int addItem(char name[], char tag[], int height, int width,	int mode, int r, int c) {
	for (register int i = 1; i <= RR; i++) {
		for (register int j = 1; j <= CC; j++) {
			if (map[i][j] > 0) {
				sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + 1;
			}
			else {
				sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1];
			}
		}
	}
	
	if (mode == 0) {
		if (getSum(r, c, height, width) != 0) return 0;
		for (register int i = r; i < r + height; i++) {
			for (register int j = c; j < c + width; j++) {
				map[i][j] = aidx;
			}
		}
	}
	else {
		int flag = 1;
		for (register int cc = 1; cc <= CC ; cc++) {
			for (register int rr = 1; rr <= RR ; rr++) {
				if (getSum(rr, cc, height, width) == 0) {
					for (register int i = rr; i < rr + height; i++) {
						for (register int j = cc; j < cc + width; j++) {
							map[i][j] = aidx;
						}
					}
					r = rr;
					c = cc;
					rr = RR + 1;
					cc = CC + 1;
					
					flag = 0;
				}
			}
		}
		if (flag) return 0;
	}	
	int tkey = getkey(tag);
	Hash* p = thash[tkey].next;
	int tidxx =0;
	while (p) {
		if (mstrcmp(arr[p->aidx].tag, tag)) {
			tidxx = p->tidx;
			break;
		}
		p = p->next;
	}
	int nkey = getkey(name);
	if (tidxx==0) {		
		tidxx = tidx++;
	}
	nhash[nkey].next = buf[bfcnt++].alloc(aidx, tidxx, nhash[nkey].next, &nhash[nkey]);
	thash[tkey].next = buf[bfcnt++].alloc(aidx, tidxx, thash[tkey].next, &thash[tkey]);
	tArea[tidxx] += (height * width);
	arr[aidx].init(r, c, height, width);
	mstrcpy(arr[aidx].name, name);
	mstrcpy(arr[aidx].tag, tag);
	aidx++;
	return 1;
}
int removeItemByName(char name[]) {
	int nkey = getkey(name);
	Hash* p = nhash[nkey].next;
	Hash* q = &nhash[nkey];
	while (p) {
		if (mstrcmp(arr[p->aidx].name, name)) {
			if (arr[p->aidx].del == 1) p->pop();
			else {
				tArea[p->tidx] -= (arr[p->aidx].height * arr[p->aidx].width);
				q->next = p->next;
				arr[p->aidx].del = 1;
				for (register int i = arr[p->aidx].r; i < arr[p->aidx].r + arr[p->aidx].height; i++) {
					for (register int j = arr[p->aidx].c; j < arr[p->aidx].c + arr[p->aidx].width; j++) {
						map[i][j] = 0;
					}
				}
				return 1;
			}			
		}
		p = p->next;
		q = q->next;
	}
	return 0;
}

int removeItemByTag(char tag[]) {
	int tkey = getkey(tag), cnt = 0;
	Hash* p = thash[tkey].next;
	while (p) {
		if (mstrcmp(arr[p->aidx].tag, tag)) {
			if (arr[p->aidx].del == 1) {
				p->pop();
			}
			else {
				tArea[p->tidx] -= (arr[p->aidx].height * arr[p->aidx].width);
				arr[p->aidx].del = 1;
				p->pop();
				cnt++;
				for (register int i = arr[p->aidx].r; i < arr[p->aidx].r + arr[p->aidx].height; i++) {
					for (register int j = arr[p->aidx].c; j < arr[p->aidx].c + arr[p->aidx].width; j++) {
						map[i][j] = 0;
					}
				}
			}
		}
		p = p->next;
	}
	return cnt;
}
int getItem(int r, int c, char name[], char tag[]) {
	int aidxx = map[r][c];
	if (aidxx == 0 || arr[aidxx].del == 1) return 0;
	mstrcpy(name, arr[aidxx].name);
	mstrcpy(tag, arr[aidxx].tag);
	return 1;
}
int getArea(char tag[]) {
	int tkey = getkey(tag);
	Hash* p = thash[tkey].next;
	while (p) {
		if (mstrcmp(arr[p->aidx].tag, tag)) {
			return tArea[p->tidx];
		}
		p = p->next;
	}
	return 0;
}