#include <iostream>
using namespace std;
char binNum[100001];
char binTmp[100001];
int nlen, nTmp, index;
char hexToBin[16][4] = { {'0','0','0','0'}, {'0','0','0','1'}, {'0','0','1','0'}, {'0','0','1','1'},
	{'0','1','0','0'}, {'0','1','0','1'}, {'0','1','1','0'}, {'0','1','1','1'},
	{'1','0','0','0'}, {'1','0','0','1'}, {'1','0','1','0'}, {'1','0','1','1'},
	{'1','1','0','0'}, {'1','1','0','1'}, {'1','1','1','0'}, {'1','1','1','1'} };
void HexToBin(char str[]) {
	for (register int i = 0; str[i]; i++) {
		int tmp = str[i] - '0';
		if (tmp >= 10) tmp = str[i] - 'A' + 10;
		for (register int j = 0; j < 4; j++) {
			binNum[nlen++] = hexToBin[tmp][j];
		}
	}	
}
int BinToDeci(char str[],int startIdx, int finishIdx) {
	int decimal = 0, idx =1;
	printf("sta = %d   fini = %d =>",startIdx, finishIdx);
	while (finishIdx>=startIdx) {
		printf("%c", str[finishIdx]);
		decimal += (str[finishIdx] - '0') * idx;
		idx *= 2;
		finishIdx--;
	}
	printf("\n");
	return decimal;
}
int DecodeStr(char str[]) {
	int version = BinToDeci(str, index, index + 2);
	printf("v = %d\n", version);
	index += 3;
	int type = BinToDeci(str, index, index + 2);
	index += 3;
	nTmp = 0;
	if (type == 4) { // literal value
		while (str[index] != '0') {
			for (int i = 1; i < 5; i++) {
				binTmp[nTmp++] = str[index+i];
			}
			index += 5;
		}
		for (int i = 1; i < 5; i++) {
			binTmp[nTmp++] = str[index + i];
		}
		index += 5;
		return version;
	}
	else { // operator
		if (str[index] == '1') {
			index += 1;
			int nSubPackets = BinToDeci(str, index, index + 10);
			index += 11;
			for (register int i = 0; i < nSubPackets; i++) {
				version += DecodeStr(str);
			}
		}
		else {
			index += 1;
			int nLenOfSubPackets = BinToDeci(str, index, index + 14);
			index += 15;
			int nowIdx = index;
			while (index<nowIdx +nLenOfSubPackets){
				version += DecodeStr(str);
			}

		}
		printf("version =%d\n", version);
		return version;
	}
}
int main() {
	char str[10001];
	scanf("%s", &str);
	HexToBin(str);
	printf("%d\n", nlen);
	for (register int i = 0; i < nlen; i++) {
		printf("%c", binNum[i]);
	}
	printf("\n");
	printf("%d\n",DecodeStr(binNum));
	return 0;
}