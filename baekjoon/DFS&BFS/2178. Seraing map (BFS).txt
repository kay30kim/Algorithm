from collections import deque
import sys
input = sys.stdin.readline
sys.setrecursionlimit(2500)

def DFS(r:int, c:int, depth):
	for k in range(8):
			nr = r + dr[k]
			nc = c + dc[k]
			if 0 <= nr and nr < N and 0 <= nc and nc < M :
				if graph[nr][nc] == 1 and visited[nr][nc] == 0 :
					visited[nr][nc] = 1
					DFS(nr,nc, depth+1)

def BFS(i:int, j:int):
	global ans
	q = deque()
	q.append([i,j,1])
	endFlag = False
	while q and endFlag == False:
		r,c,d = q.popleft()
		for k in range(4):
			nr = r + dr[k]
			nc = c + dc[k]
			if 0 <= nr < N and 0 <= nc < M and endFlag == False :
				if nr == N-1 and nc == M-1:
					ans = d+1
					endFlag = True
				elif graph[nr][nc] == 1 and visited[nr][nc] == 0 :
					visited[nr][nc] = 1
					q.append([nr,nc,d+1])
					
				
				

dr = [0,0,1,-1]
dc = [1,-1,0,0]

N,M = map(int, input().split())
graph = [[0 for _ in range(M)] for _ in range(N)]

for i in range(N):
	li = input()
	for j in range(M):
		graph[i][j] = int(li[j])
visited = [[0 for _ in range(M)] for _ in range(N)]
ans = 0
BFS(0,0)
print(ans)
